{"ast":null,"code":"import { all, fork, put, takeLatest, delay } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_OUT_SUCCESS, LOG_OUT_FAILURE } from '../reducers/user'; // 별붙이면 안됨\n\nfunction logInAPI(data) {\n  return axios.post('/api/login', data);\n}\n\nfunction* logIn(action) {\n  try {\n    // 매개변수를 넘길때 밑의 형태로 넘겨야함\n    //const result = yield call(logInAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_IN_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction logOutAPI() {\n  return axios.post('/api/logout');\n}\n\nfunction* logOut() {\n  try {\n    // const result = yield call(logOutAPI);\n    yield delay(1000);\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: 'LOG_OUT_FAILURE',\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchLogin() {\n  // take는 일회용임\n  yield takeLatest('LOG_IN_REQUEST', logIn);\n}\n\nfunction* watchLogOut() {\n  yield takeLatest('LOG_OUT_REQUEST', logOut);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin), fork(watchLogOut)]);\n}","map":{"version":3,"sources":["C:/Users/syjoo/Desktop/personal/react-nodebrid/prepare/front/sagas/user.js"],"names":["all","fork","put","takeLatest","delay","axios","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","logInAPI","data","post","logIn","action","type","err","response","logOutAPI","logOut","watchLogin","watchLogOut","userSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,UAAzB,EAAqCC,KAArC,QAAkD,oBAAlD;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACIC,cADJ,EAEIC,cAFJ,EAGIC,eAHJ,EAIIC,eAJJ,QAMQ,kBANR,C,CAQA;;AACA,SAASC,QAAT,CAAkBC,IAAlB,EAAuB;AACnB,SAAON,KAAK,CAACO,IAAN,CAAW,YAAX,EAAyBD,IAAzB,CAAP;AACH;;AAED,UAAUE,KAAV,CAAgBC,MAAhB,EAAuB;AACnB,MAAG;AACC;AACA;AACA,UAAMV,KAAK,CAAC,IAAD,CAAX;AACA,UAAMF,GAAG,CAAC;AACNa,MAAAA,IAAI,EAAET,cADA;AAENK,MAAAA,IAAI,EAAEG,MAAM,CAACH;AAFP,KAAD,CAAT;AAIH,GARD,CAQC,OAAMK,GAAN,EAAU;AACP,UAAMd,GAAG,CAAC;AACNa,MAAAA,IAAI,EAAER,cADA;AAENI,MAAAA,IAAI,EAAEK,GAAG,CAACC,QAAJ,CAAaN;AAFb,KAAD,CAAT;AAIH;AACJ;;AAED,SAASO,SAAT,GAAoB;AAChB,SAAOb,KAAK,CAACO,IAAN,CAAW,aAAX,CAAP;AACH;;AAED,UAAUO,MAAV,GAAkB;AACd,MAAG;AACC;AACA,UAAMf,KAAK,CAAC,IAAD,CAAX;AACA,UAAMF,GAAG,CAAC;AACNa,MAAAA,IAAI,EAAEP;AADA,KAAD,CAAT;AAGH,GAND,CAMC,OAAMQ,GAAN,EAAU;AACP,UAAMd,GAAG,CAAC;AACNa,MAAAA,IAAI,EAAE,iBADA;AAENJ,MAAAA,IAAI,EAAEK,GAAG,CAACC,QAAJ,CAAaN;AAFb,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUS,UAAV,GAAsB;AAClB;AACA,QAAMjB,UAAU,CAAC,gBAAD,EAAmBU,KAAnB,CAAhB;AACH;;AAED,UAAUQ,WAAV,GAAuB;AACnB,QAAMlB,UAAU,CAAC,iBAAD,EAAoBgB,MAApB,CAAhB;AACH;;AAED,eAAe,UAAUG,QAAV,GAAqB;AAChC,QAAMtB,GAAG,CAAC,CACNC,IAAI,CAACmB,UAAD,CADE,EAENnB,IAAI,CAACoB,WAAD,CAFE,CAAD,CAAT;AAIH","sourcesContent":["import { all, fork, put, takeLatest, delay } from 'redux-saga/effects';\r\n\r\nimport axios from 'axios';\r\nimport { \r\n    LOG_IN_SUCCESS, \r\n    LOG_IN_FAILURE,\r\n    LOG_OUT_SUCCESS,\r\n    LOG_OUT_FAILURE\r\n\r\n } from '../reducers/user';\r\n\r\n// 별붙이면 안됨\r\nfunction logInAPI(data){\r\n    return axios.post('/api/login', data);\r\n}\r\n\r\nfunction* logIn(action){\r\n    try{\r\n        // 매개변수를 넘길때 밑의 형태로 넘겨야함\r\n        //const result = yield call(logInAPI, action.data);\r\n        yield delay(1000);\r\n        yield put({\r\n            type: LOG_IN_SUCCESS,\r\n            data: action.data,\r\n        });\r\n    }catch(err){\r\n        yield put({\r\n            type: LOG_IN_FAILURE,\r\n            data: err.response.data\r\n        })\r\n    }\r\n}\r\n\r\nfunction logOutAPI(){\r\n    return axios.post('/api/logout');\r\n}\r\n\r\nfunction* logOut(){\r\n    try{\r\n        // const result = yield call(logOutAPI);\r\n        yield delay(1000);\r\n        yield put({\r\n            type: LOG_OUT_SUCCESS,\r\n        });\r\n    }catch(err){\r\n        yield put({\r\n            type: 'LOG_OUT_FAILURE',\r\n            data: err.response.data\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchLogin(){\r\n    // take는 일회용임\r\n    yield takeLatest('LOG_IN_REQUEST', logIn);\r\n}\r\n\r\nfunction* watchLogOut(){\r\n    yield takeLatest('LOG_OUT_REQUEST', logOut);\r\n}\r\n\r\nexport default function* userSaga() {\r\n    yield all([\r\n        fork(watchLogin),\r\n        fork(watchLogOut),\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}