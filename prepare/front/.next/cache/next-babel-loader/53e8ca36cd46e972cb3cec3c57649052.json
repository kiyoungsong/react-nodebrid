{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { HYDRATE } from \"next-redux-wrapper\";\nconst initialState = {\n  user: {},\n  post: {\n    mainPosts: []\n  }\n}; //async action creator (redux-saga)\n// (이전상태, 액션) => 다음상태\n\nconst rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'HYDRATE':\n      return _objectSpread(_objectSpread({}, state), action.payload);\n\n    default:\n      return state;\n  }\n};\n\nexport default rootReducer;","map":{"version":3,"sources":["C:/Users/syjoo/Desktop/personal/react-nodebrid/prepare/front/reducers/index.js"],"names":["HYDRATE","initialState","user","post","mainPosts","rootReducer","state","action","type","payload"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAwB,oBAAxB;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,IAAI,EAAC,EADY;AAIjBC,EAAAA,IAAI,EAAC;AACDC,IAAAA,SAAS,EAAE;AADV;AAJY,CAArB,C,CASA;AAKA;;AACA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGL,YAAT,EAAuBM,MAAvB,KAAkC;AAElD,UAAOA,MAAM,CAACC,IAAd;AACI,SAAK,SAAL;AACI,6CACOF,KADP,GACiBC,MAAM,CAACE,OADxB;;AAIJ;AACI,aAAOH,KAAP;AAPR;AASH,CAXD;;AAaA,eAAeD,WAAf","sourcesContent":["import { HYDRATE } from \"next-redux-wrapper\"\n\nconst initialState = {\n    user:{\n        \n    },\n    post:{\n        mainPosts: [],\n    }\n}\n\n//async action creator (redux-saga)\n\n\n\n\n// (이전상태, 액션) => 다음상태\nconst rootReducer = (state = initialState, action) => {\n\n    switch(action.type){\n        case 'HYDRATE':\n            return {\n                ...state, ...action.payload,\n            }\n        \n        default:\n            return state;\n    }\n}\n\nexport default rootReducer;"]},"metadata":{},"sourceType":"module"}