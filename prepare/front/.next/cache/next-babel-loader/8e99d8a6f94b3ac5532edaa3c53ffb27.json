{"ast":null,"code":"import { all, fork, put, takeLatest, delay } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE } from '../reducers/user'; // 별붙이면 안됨\n\nfunction logInAPI(data) {\n  return axios.post('/api/login', data);\n}\n\nfunction* logIn(action) {\n  try {\n    // 매개변수를 넘길때 밑의 형태로 넘겨야함\n    //const result = yield call(logInAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_IN_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction logOutAPI() {\n  return axios.post('/api/logout');\n}\n\nfunction* logOut() {\n  try {\n    // const result = yield call(logOutAPI);\n    yield delay(1000);\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction signUpAPI() {\n  return axios.post('/api/signup');\n}\n\nfunction* signUp() {\n  try {\n    // const result = yield call(signUpAPI);\n    yield delay(1000);\n    yield put({\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: SIGN_UP_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchLogin() {\n  // take는 일회용임\n  yield takeLatest(LOG_IN_REQUEST, logIn);\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin), fork(watchLogOut), fork(watchSignUp)]);\n}","map":{"version":3,"sources":["C:/Users/syjoo/Desktop/personal/react-nodebrid/prepare/front/sagas/user.js"],"names":["all","fork","put","takeLatest","delay","axios","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","logInAPI","data","post","logIn","action","type","err","response","logOutAPI","logOut","signUpAPI","signUp","watchLogin","watchLogOut","watchSignUp","userSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,UAAzB,EAAqCC,KAArC,QAAkD,oBAAlD;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACEC,cADF,EAEEC,cAFF,EAGEC,cAHF,EAIEC,eAJF,EAKEC,eALF,EAMEC,eANF,EAOEC,eAPF,EAQEC,eARF,EASEC,eATF,QAUO,kBAVP,C,CAYA;;AACA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACtB,SAAOX,KAAK,CAACY,IAAN,CAAW,YAAX,EAAyBD,IAAzB,CAAP;AACD;;AAED,UAAUE,KAAV,CAAgBC,MAAhB,EAAwB;AACtB,MAAI;AACF;AACA;AACA,UAAMf,KAAK,CAAC,IAAD,CAAX;AACA,UAAMF,GAAG,CAAC;AACRkB,MAAAA,IAAI,EAAEb,cADE;AAERS,MAAAA,IAAI,EAAEG,MAAM,CAACH;AAFL,KAAD,CAAT;AAID,GARD,CAQE,OAAOK,GAAP,EAAY;AACZ,UAAMnB,GAAG,CAAC;AACRkB,MAAAA,IAAI,EAAEZ,cADE;AAERQ,MAAAA,IAAI,EAAEK,GAAG,CAACC,QAAJ,CAAaN;AAFX,KAAD,CAAT;AAID;AACF;;AAED,SAASO,SAAT,GAAqB;AACnB,SAAOlB,KAAK,CAACY,IAAN,CAAW,aAAX,CAAP;AACD;;AAED,UAAUO,MAAV,GAAmB;AACjB,MAAI;AACF;AACA,UAAMpB,KAAK,CAAC,IAAD,CAAX;AACA,UAAMF,GAAG,CAAC;AACRkB,MAAAA,IAAI,EAAEV;AADE,KAAD,CAAT;AAGD,GAND,CAME,OAAMW,GAAN,EAAW;AACX,UAAMnB,GAAG,CAAC;AACRkB,MAAAA,IAAI,EAAET,eADE;AAERK,MAAAA,IAAI,EAAEK,GAAG,CAACC,QAAJ,CAAaN;AAFX,KAAD,CAAT;AAID;AACF;;AAED,SAASS,SAAT,GAAqB;AACnB,SAAOpB,KAAK,CAACY,IAAN,CAAW,aAAX,CAAP;AACD;;AAED,UAAUS,MAAV,GAAmB;AACjB,MAAI;AACF;AACA,UAAMtB,KAAK,CAAC,IAAD,CAAX;AACA,UAAMF,GAAG,CAAC;AACRkB,MAAAA,IAAI,EAAEP;AADE,KAAD,CAAT;AAGD,GAND,CAME,OAAOQ,GAAP,EAAY;AACZ,UAAMnB,GAAG,CAAC;AACRkB,MAAAA,IAAI,EAAEN,eADE;AAERE,MAAAA,IAAI,EAAEK,GAAG,CAACC,QAAJ,CAAaN;AAFX,KAAD,CAAT;AAID;AACF;;AAED,UAAUW,UAAV,GAAuB;AACrB;AACA,QAAMxB,UAAU,CAACG,cAAD,EAAiBY,KAAjB,CAAhB;AACD;;AAED,UAAUU,WAAV,GAAwB;AACtB,QAAMzB,UAAU,CAACM,eAAD,EAAkBe,MAAlB,CAAhB;AACD;;AAED,UAAUK,WAAV,GAAwB;AACtB,QAAM1B,UAAU,CAACS,eAAD,EAAkBc,MAAlB,CAAhB;AACD;;AAED,eAAe,UAAUI,QAAV,GAAqB;AAClC,QAAM9B,GAAG,CAAC,CACRC,IAAI,CAAC0B,UAAD,CADI,EAER1B,IAAI,CAAC2B,WAAD,CAFI,EAGR3B,IAAI,CAAC4B,WAAD,CAHI,CAAD,CAAT;AAKD","sourcesContent":["import { all, fork, put, takeLatest, delay } from 'redux-saga/effects';\r\n\r\nimport axios from 'axios';\r\nimport {\r\n  LOG_IN_REQUEST,\r\n  LOG_IN_SUCCESS,\r\n  LOG_IN_FAILURE,\r\n  LOG_OUT_REQUEST,\r\n  LOG_OUT_SUCCESS,\r\n  LOG_OUT_FAILURE,\r\n  SIGN_UP_REQUEST,\r\n  SIGN_UP_SUCCESS,\r\n  SIGN_UP_FAILURE,\r\n} from '../reducers/user';\r\n\r\n// 별붙이면 안됨\r\nfunction logInAPI(data) {\r\n  return axios.post('/api/login', data);\r\n}\r\n\r\nfunction* logIn(action) {\r\n  try {\r\n    // 매개변수를 넘길때 밑의 형태로 넘겨야함\r\n    //const result = yield call(logInAPI, action.data);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: LOG_IN_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOG_IN_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction logOutAPI() {\r\n  return axios.post('/api/logout');\r\n}\r\n\r\nfunction* logOut() {\r\n  try {\r\n    // const result = yield call(logOutAPI);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: LOG_OUT_SUCCESS,\r\n    });\r\n  } catch(err) {\r\n    yield put({\r\n      type: LOG_OUT_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction signUpAPI() {\r\n  return axios.post('/api/signup') ;\r\n}\r\n\r\nfunction* signUp() {\r\n  try {\r\n    // const result = yield call(signUpAPI);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: SIGN_UP_SUCCESS,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: SIGN_UP_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLogin() {\r\n  // take는 일회용임\r\n  yield takeLatest(LOG_IN_REQUEST, logIn);\r\n}\r\n\r\nfunction* watchLogOut() {\r\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\r\n}\r\n\r\nfunction* watchSignUp() {\r\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\r\n}\r\n\r\nexport default function* userSaga() {\r\n  yield all([\r\n    fork(watchLogin),\r\n    fork(watchLogOut),\r\n    fork(watchSignUp),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}