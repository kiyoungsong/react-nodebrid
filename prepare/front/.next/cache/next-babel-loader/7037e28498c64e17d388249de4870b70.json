{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// 리덕스 서버사이드 렌더링을 위해서 HYDRATE를 사용\nimport { HYDRATE } from 'next-redux-wrapper';\nimport { combineReducers } from 'redux';\nimport user from './user';\nimport post from './post'; // (이전상태, 액션) => 다음상태\n\nconst rootReducer = combineReducers({\n  // HYDRATE를 위해서 인덱스 리듀서를 추가해주는 것임\n  index: (state = {}, action) => {\n    switch (action.type) {\n      case 'HYDRATE':\n        return _objectSpread(_objectSpread({}, state), action.payload);\n\n      default:\n        return state;\n    }\n  },\n  user,\n  post\n});\nexport default rootReducer;","map":{"version":3,"sources":["C:/Users/syjoo/Desktop/personal/react-nodebrid/prepare/front/reducers/index.js"],"names":["HYDRATE","combineReducers","user","post","rootReducer","index","state","action","type","payload"],"mappings":";;;;;;AAAA;AACA,SAASA,OAAT,QAAwB,oBAAxB;AACA,SAASC,eAAT,QAAgC,OAAhC;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,IAAP,MAAiB,QAAjB,C,CAEA;;AACA,MAAMC,WAAW,GAAGH,eAAe,CAAC;AAClC;AACAI,EAAAA,KAAK,EAAE,CAACC,KAAK,GAAG,EAAT,EAAaC,MAAb,KAAwB;AAC7B,YAAQA,MAAM,CAACC,IAAf;AACE,WAAK,SAAL;AACE,+CACKF,KADL,GACeC,MAAM,CAACE,OADtB;;AAGF;AACE,eAAOH,KAAP;AANJ;AAQD,GAXiC;AAYlCJ,EAAAA,IAZkC;AAalCC,EAAAA;AAbkC,CAAD,CAAnC;AAgBA,eAAeC,WAAf","sourcesContent":["// 리덕스 서버사이드 렌더링을 위해서 HYDRATE를 사용\nimport { HYDRATE } from 'next-redux-wrapper';\nimport { combineReducers } from 'redux';\nimport user from './user';\nimport post from './post';\n\n// (이전상태, 액션) => 다음상태\nconst rootReducer = combineReducers({\n  // HYDRATE를 위해서 인덱스 리듀서를 추가해주는 것임\n  index: (state = {}, action) => {\n    switch (action.type){\n      case 'HYDRATE':\n        return {\n          ...state, ...action.payload,\n        };\n      default:\n        return state;\n    }\n  },\n  user,\n  post,\n});\n\nexport default rootReducer;\n"]},"metadata":{},"sourceType":"module"}