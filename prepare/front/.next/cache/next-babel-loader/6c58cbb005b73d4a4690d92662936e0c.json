{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(postAdd),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(postSage);\n\nimport { all } from \"@redux-saga/core/effects\";\nimport { fork, put, delay, takeLatest } from \"@redux-saga/effects\";\nimport axios from \"axios\";\n\nfunction postAddAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction postAdd(action) {\n  return _regeneratorRuntime.wrap(function postAdd$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return put({\n            type: 'POST_ADD_REQUEST'\n          });\n\n        case 3:\n          _context.next = 5;\n          return delay(1000);\n\n        case 5:\n          _context.next = 7;\n          return put({\n            type: 'POST_ADD_SUCCESS' // data: result.data\n\n          });\n\n        case 7:\n          _context.next = 13;\n          break;\n\n        case 9:\n          _context.prev = 9;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 13;\n          return put({\n            type: 'POST_ADD_FAILURE' // data: err.response.data\n\n          });\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 9]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest('ADD_POST_REQUEST', postAdd);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nexport default function postSage() {\n  return _regeneratorRuntime.wrap(function postSage$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([fork(watchAddPost)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["C:/Users/syjoo/Desktop/personal/react-nodebrid/prepare/front/sagas/post.js"],"names":["postAdd","watchAddPost","postSage","all","fork","put","delay","takeLatest","axios","postAddAPI","data","post","action","type"],"mappings":";;oDAQUA,O;qDAmBAC,Y;qDAIeC,Q;;AA/BzB,SAASC,GAAT,QAAoB,0BAApB;AACA,SAASC,IAAT,EAAeC,GAAf,EAAoBC,KAApB,EAA2BC,UAA3B,QAA6C,qBAA7C;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,UAAT,CAAoBC,IAApB,EAAyB;AACrB,SAAOF,KAAK,CAACG,IAAN,CAAW,WAAX,EAAwBD,IAAxB,CAAP;AACH;;AAED,SAAUV,OAAV,CAAkBY,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEQ,iBAAMP,GAAG,CAAC;AACNQ,YAAAA,IAAI,EAAE;AADA,WAAD,CAAT;;AAFR;AAAA;AAMQ,iBAAMP,KAAK,CAAC,IAAD,CAAX;;AANR;AAAA;AAOQ,iBAAMD,GAAG,CAAC;AACNQ,YAAAA,IAAI,EAAE,kBADA,CAEN;;AAFM,WAAD,CAAT;;AAPR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAYQ,iBAAMR,GAAG,CAAC;AACNQ,YAAAA,IAAI,EAAE,kBADA,CAEN;;AAFM,WAAD,CAAT;;AAZR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAmBA,SAAUZ,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMM,UAAU,CAAC,kBAAD,EAAqBP,OAArB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMC,GAAG,CAAC,CACNC,IAAI,CAACH,YAAD,CADE,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all } from \"@redux-saga/core/effects\";\r\nimport { fork, put, delay, takeLatest } from \"@redux-saga/effects\";\r\nimport axios from \"axios\";\r\n\r\nfunction postAddAPI(data){\r\n    return axios.post('/api/post', data);\r\n}\r\n\r\nfunction* postAdd(action){\r\n    try{\r\n        yield put({\r\n            type: 'POST_ADD_REQUEST',\r\n        });\r\n        // const result = yield call(postAddAPI, action.data);\r\n        yield delay(1000);\r\n        yield put({\r\n            type: 'POST_ADD_SUCCESS',\r\n            // data: result.data\r\n        });\r\n    }catch(err){\r\n        yield put({\r\n            type: 'POST_ADD_FAILURE',\r\n            // data: err.response.data\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchAddPost(){\r\n    yield takeLatest('ADD_POST_REQUEST', postAdd);\r\n}\r\n\r\nexport default function* postSage(){\r\n    yield all([\r\n        fork(watchAddPost),\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}