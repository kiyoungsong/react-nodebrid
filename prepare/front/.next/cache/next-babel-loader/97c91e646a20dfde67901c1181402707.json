{"ast":null,"code":"import { all, fork, put, takeLatest, delay } from 'redux-saga/effects';\nimport axios from 'axios'; // 별붙이면 안됨\n\nfunction logInAPI(data) {\n  return axios.post('/api/login', data);\n}\n\nfunction* logIn(action) {\n  try {\n    console.log(\"saga, login\"); // 매개변수를 넘길때 밑의 형태로 넘겨야함\n    //const result = yield call(logInAPI, action.data);\n\n    yield delay(1000);\n    yield put({\n      type: 'LOG_IN_SUCCESS',\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: 'LOG_IN_FAILURE',\n      data: err.response.data\n    });\n  }\n}\n\nfunction logOutAPI() {\n  return axios.post('/api/logout');\n}\n\nfunction* logOut() {\n  try {\n    // const result = yield call(logOutAPI);\n    yield delay(1000);\n    yield put({\n      type: 'LOG_OUT_SUCCESS' // data: result.data\n\n    });\n  } catch (err) {\n    yield put({\n      type: 'LOG_OUT_FAILURE' // data: err.response.data\n\n    });\n  }\n}\n\nfunction* watchLogin() {\n  // take는 일회용임\n  yield takeLatest('LOG_IN_REQUEST', logIn);\n}\n\nfunction* watchLogOut() {\n  yield takeLatest('LOG_OUT_REQUEST', logOut);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin), fork(watchLogOut)]);\n}","map":{"version":3,"sources":["C:/Users/syjoo/Desktop/personal/react-nodebrid/prepare/front/sagas/user.js"],"names":["all","fork","put","takeLatest","delay","axios","logInAPI","data","post","logIn","action","console","log","type","err","response","logOutAPI","logOut","watchLogin","watchLogOut","userSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,UAAzB,EAAqCC,KAArC,QAAkD,oBAAlD;AAEA,OAAOC,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,SAASC,QAAT,CAAkBC,IAAlB,EAAuB;AACnB,SAAOF,KAAK,CAACG,IAAN,CAAW,YAAX,EAAyBD,IAAzB,CAAP;AACH;;AAED,UAAUE,KAAV,CAAgBC,MAAhB,EAAuB;AACnB,MAAG;AACCC,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EADD,CAEC;AACA;;AACA,UAAMR,KAAK,CAAC,IAAD,CAAX;AACA,UAAMF,GAAG,CAAC;AACNW,MAAAA,IAAI,EAAE,gBADA;AAENN,MAAAA,IAAI,EAAEG,MAAM,CAACH;AAFP,KAAD,CAAT;AAIH,GATD,CASC,OAAMO,GAAN,EAAU;AACP,UAAMZ,GAAG,CAAC;AACNW,MAAAA,IAAI,EAAE,gBADA;AAENN,MAAAA,IAAI,EAAEO,GAAG,CAACC,QAAJ,CAAaR;AAFb,KAAD,CAAT;AAIH;AACJ;;AAED,SAASS,SAAT,GAAoB;AAChB,SAAOX,KAAK,CAACG,IAAN,CAAW,aAAX,CAAP;AACH;;AAED,UAAUS,MAAV,GAAkB;AACd,MAAG;AACC;AACA,UAAMb,KAAK,CAAC,IAAD,CAAX;AACA,UAAMF,GAAG,CAAC;AACNW,MAAAA,IAAI,EAAE,iBADA,CAEN;;AAFM,KAAD,CAAT;AAIH,GAPD,CAOC,OAAMC,GAAN,EAAU;AACP,UAAMZ,GAAG,CAAC;AACNW,MAAAA,IAAI,EAAE,iBADA,CAEN;;AAFM,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUK,UAAV,GAAsB;AAClB;AACA,QAAMf,UAAU,CAAC,gBAAD,EAAmBM,KAAnB,CAAhB;AACH;;AAED,UAAUU,WAAV,GAAuB;AACnB,QAAMhB,UAAU,CAAC,iBAAD,EAAoBc,MAApB,CAAhB;AACH;;AAED,eAAe,UAAUG,QAAV,GAAqB;AAChC,QAAMpB,GAAG,CAAC,CACNC,IAAI,CAACiB,UAAD,CADE,EAENjB,IAAI,CAACkB,WAAD,CAFE,CAAD,CAAT;AAIH","sourcesContent":["import { all, fork, put, takeLatest, delay } from 'redux-saga/effects';\r\n\r\nimport axios from 'axios';\r\n\r\n// 별붙이면 안됨\r\nfunction logInAPI(data){\r\n    return axios.post('/api/login', data);\r\n}\r\n\r\nfunction* logIn(action){\r\n    try{\r\n        console.log(\"saga, login\");\r\n        // 매개변수를 넘길때 밑의 형태로 넘겨야함\r\n        //const result = yield call(logInAPI, action.data);\r\n        yield delay(1000);\r\n        yield put({\r\n            type: 'LOG_IN_SUCCESS',\r\n            data: action.data\r\n        });\r\n    }catch(err){\r\n        yield put({\r\n            type: 'LOG_IN_FAILURE',\r\n            data: err.response.data\r\n        })\r\n    }\r\n}\r\n\r\nfunction logOutAPI(){\r\n    return axios.post('/api/logout');\r\n}\r\n\r\nfunction* logOut(){\r\n    try{\r\n        // const result = yield call(logOutAPI);\r\n        yield delay(1000);\r\n        yield put({\r\n            type: 'LOG_OUT_SUCCESS',\r\n            // data: result.data\r\n        });\r\n    }catch(err){\r\n        yield put({\r\n            type: 'LOG_OUT_FAILURE',\r\n            // data: err.response.data\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchLogin(){\r\n    // take는 일회용임\r\n    yield takeLatest('LOG_IN_REQUEST', logIn);\r\n}\r\n\r\nfunction* watchLogOut(){\r\n    yield takeLatest('LOG_OUT_REQUEST', logOut);\r\n}\r\n\r\nexport default function* userSaga() {\r\n    yield all([\r\n        fork(watchLogin),\r\n        fork(watchLogOut),\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}