{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { HYDRATE } from \"next-redux-wrapper\";\nconst initialState = {\n  user: {\n    isLoggedIn: false,\n    user: null,\n    siginUpData: {},\n    loginData: {}\n  },\n  post: {\n    mainPosts: []\n  }\n}; //async action creator (redux-saga)\n// action creator\n\nexport const loginAction = data => {\n  return {\n    type: 'LOG_IN',\n    data\n  };\n};\nexport const logoutAction = () => {\n  return {\n    type: 'LOG_OUT'\n  };\n}; // (이전상태, 액션) => 다음상태\n\nconst rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'HYDRATE':\n      return _objectSpread(_objectSpread({}, state), action.payload);\n\n    case 'LOG_IN':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        user: _objectSpread(_objectSpread({}, state.user), {}, {\n          isLoggedIn: true,\n          user: action.data\n        })\n      });\n\n    case 'LOG_OUT':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        user: _objectSpread(_objectSpread({}, state.user), {}, {\n          isLoggedIn: false,\n          user: null\n        })\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default rootReducer;","map":{"version":3,"sources":["C:/Users/syjoo/Desktop/personal/react-nodebrid/prepare/front/reducers/index.js"],"names":["HYDRATE","initialState","user","isLoggedIn","siginUpData","loginData","post","mainPosts","loginAction","data","type","logoutAction","rootReducer","state","action","payload"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAwB,oBAAxB;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,IAAI,EAAC;AACDC,IAAAA,UAAU,EAAE,KADX;AAEDD,IAAAA,IAAI,EAAE,IAFL;AAGDE,IAAAA,WAAW,EAAC,EAHX;AAIDC,IAAAA,SAAS,EAAE;AAJV,GADY;AAOjBC,EAAAA,IAAI,EAAC;AACDC,IAAAA,SAAS,EAAE;AADV;AAPY,CAArB,C,CAYA;AAEA;;AACA,OAAO,MAAMC,WAAW,GAAIC,IAAD,IAAU;AACjC,SAAO;AACHC,IAAAA,IAAI,EAAE,QADH;AAEHD,IAAAA;AAFG,GAAP;AAIH,CALM;AAOP,OAAO,MAAME,YAAY,GAAG,MAAM;AAC9B,SAAO;AACHD,IAAAA,IAAI,EAAE;AADH,GAAP;AAGH,CAJM,C,CAOP;;AACA,MAAME,WAAW,GAAG,CAACC,KAAK,GAAGZ,YAAT,EAAuBa,MAAvB,KAAkC;AAElD,UAAOA,MAAM,CAACJ,IAAd;AACI,SAAK,SAAL;AACI,6CACOG,KADP,GACiBC,MAAM,CAACC,OADxB;;AAGJ,SAAK,QAAL;AACI,6CACOF,KADP;AAEIX,QAAAA,IAAI,kCACGW,KAAK,CAACX,IADT;AAEAC,UAAAA,UAAU,EAAE,IAFZ;AAGAD,UAAAA,IAAI,EAAEY,MAAM,CAACL;AAHb;AAFR;;AAQJ,SAAK,SAAL;AACI,6CACOI,KADP;AAEIX,QAAAA,IAAI,kCACGW,KAAK,CAACX,IADT;AAEAC,UAAAA,UAAU,EAAE,KAFZ;AAGAD,UAAAA,IAAI,EAAE;AAHN;AAFR;;AAQJ;AACI,aAAOW,KAAP;AAxBR;AA0BH,CA5BD;;AA8BA,eAAeD,WAAf","sourcesContent":["import { HYDRATE } from \"next-redux-wrapper\"\n\nconst initialState = {\n    user:{\n        isLoggedIn: false,\n        user: null,\n        siginUpData:{},\n        loginData: {},\n    },\n    post:{\n        mainPosts: [],\n    }\n}\n\n//async action creator (redux-saga)\n\n// action creator\nexport const loginAction = (data) => {\n    return {\n        type: 'LOG_IN',\n        data\n    }\n}\n\nexport const logoutAction = () => {\n    return {\n        type: 'LOG_OUT',\n    }\n}\n\n\n// (이전상태, 액션) => 다음상태\nconst rootReducer = (state = initialState, action) => {\n\n    switch(action.type){\n        case 'HYDRATE':\n            return {\n                ...state, ...action.payload,\n            }\n        case 'LOG_IN':\n            return { \n                ...state,\n                user:{\n                    ...state.user,\n                    isLoggedIn: true,\n                    user: action.data\n                }\n            }\n        case 'LOG_OUT':\n            return { \n                ...state,\n                user:{\n                    ...state.user,\n                    isLoggedIn: false,\n                    user: null\n                }\n            }\n        default:\n            return state;\n    }\n}\n\nexport default rootReducer;"]},"metadata":{},"sourceType":"module"}