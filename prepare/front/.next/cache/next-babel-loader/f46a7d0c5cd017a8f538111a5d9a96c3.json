{"ast":null,"code":"import { all, fork, put, takeLatest, delay } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { FOLLOW_REQUEST, FOLLOW_SUCCESS, FOLLOW_FAILURE, UNFOLLOW_REQUEST, UNFOLLOW_SUCCESS, UNFOLLOW_FAILURE, LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE } from '../reducers/user';\n\nfunction followAPI(data) {\n  return axios.patch(`/user/${data}/follow`);\n}\n\nfunction* follow(action) {\n  try {\n    // const result = yield call(followAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: FOLLOW_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: FOLLOW_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction unfollowAPI(data) {\n  return axios.post('/api/unfollow', data);\n}\n\nfunction* unfollow(action) {\n  try {\n    // 매개변수를 넘길때 밑의 형태로 넘겨야함\n    // const result = yield call(followAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: UNFOLLOW_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: UNFOLLOW_FAILURE,\n      data: err.response.data\n    });\n  }\n} // 별붙이면 안됨\n\n\nfunction logInAPI(data) {\n  return axios.post('/api/login', data);\n}\n\nfunction* logIn(action) {\n  try {\n    // 매개변수를 넘길때 밑의 형태로 넘겨야함\n    // const result = yield call(logInAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_IN_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction logOutAPI() {\n  return axios.post('/api/logout');\n}\n\nfunction* logOut() {\n  try {\n    // const result = yield call(logOutAPI);\n    yield delay(1000);\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction signUpAPI() {\n  return axios.post('/api/signup');\n}\n\nfunction* signUp() {\n  try {\n    // const result = yield call(signUpAPI);\n    yield delay(1000);\n    yield put({\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: SIGN_UP_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchFollow() {\n  yield takeLatest(FOLLOW_REQUEST, follow);\n}\n\nfunction* watchUnfollow() {\n  yield takeLatest(UNFOLLOW_REQUEST, unfollow);\n}\n\nfunction* watchLogin() {\n  // take는 일회용임\n  yield takeLatest(LOG_IN_REQUEST, logIn);\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchFollow), fork(watchUnfollow), fork(watchLogin), fork(watchLogOut), fork(watchSignUp)]);\n}","map":{"version":3,"sources":["C:/Users/syjoo/Desktop/personal/react-nodebrid/prepare/front/sagas/user.js"],"names":["all","fork","put","takeLatest","delay","axios","FOLLOW_REQUEST","FOLLOW_SUCCESS","FOLLOW_FAILURE","UNFOLLOW_REQUEST","UNFOLLOW_SUCCESS","UNFOLLOW_FAILURE","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","followAPI","data","patch","follow","action","type","err","console","error","response","unfollowAPI","post","unfollow","logInAPI","logIn","logOutAPI","logOut","signUpAPI","signUp","watchFollow","watchUnfollow","watchLogin","watchLogOut","watchSignUp","userSaga"],"mappings":"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","sourcesContent":["import { all, fork, put, takeLatest, delay } from 'redux-saga/effects';\r\n\r\nimport axios from 'axios';\r\nimport {\r\n  FOLLOW_REQUEST,\r\n  FOLLOW_SUCCESS,\r\n  FOLLOW_FAILURE,\r\n  UNFOLLOW_REQUEST,\r\n  UNFOLLOW_SUCCESS,\r\n  UNFOLLOW_FAILURE,\r\n  LOG_IN_REQUEST,\r\n  LOG_IN_SUCCESS,\r\n  LOG_IN_FAILURE,\r\n  LOG_OUT_REQUEST,\r\n  LOG_OUT_SUCCESS,\r\n  LOG_OUT_FAILURE,\r\n  SIGN_UP_REQUEST,\r\n  SIGN_UP_SUCCESS,\r\n  SIGN_UP_FAILURE,\r\n} from '../reducers/user';\r\n\r\nfunction followAPI(data) {\r\n  return axios.patch(`/user/${data}/follow`);\r\n}\r\n\r\nfunction* follow(action) {\r\n  try {\r\n    // const result = yield call(followAPI, action.data);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: FOLLOW_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: FOLLOW_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction unfollowAPI(data) {\r\n  return axios.post('/api/unfollow', data);\r\n}\r\n\r\nfunction* unfollow(action) {\r\n  try {\r\n    // 매개변수를 넘길때 밑의 형태로 넘겨야함\r\n    // const result = yield call(followAPI, action.data);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: UNFOLLOW_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: UNFOLLOW_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\n// 별붙이면 안됨\r\nfunction logInAPI(data) {\r\n  return axios.post('/api/login', data);\r\n}\r\n\r\nfunction* logIn(action) {\r\n  try {\r\n    // 매개변수를 넘길때 밑의 형태로 넘겨야함\r\n    // const result = yield call(logInAPI, action.data);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: LOG_IN_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOG_IN_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction logOutAPI() {\r\n  return axios.post('/api/logout');\r\n}\r\n\r\nfunction* logOut() {\r\n  try {\r\n    // const result = yield call(logOutAPI);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: LOG_OUT_SUCCESS,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOG_OUT_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction signUpAPI() {\r\n  return axios.post('/api/signup');\r\n}\r\n\r\nfunction* signUp() {\r\n  try {\r\n    // const result = yield call(signUpAPI);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: SIGN_UP_SUCCESS,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: SIGN_UP_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchFollow() {\r\n  yield takeLatest(FOLLOW_REQUEST, follow);\r\n}\r\n\r\nfunction* watchUnfollow() {\r\n  yield takeLatest(UNFOLLOW_REQUEST, unfollow);\r\n}\r\n\r\nfunction* watchLogin() {\r\n  // take는 일회용임\r\n  yield takeLatest(LOG_IN_REQUEST, logIn);\r\n}\r\n\r\nfunction* watchLogOut() {\r\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\r\n}\r\n\r\nfunction* watchSignUp() {\r\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\r\n}\r\n\r\nexport default function* userSaga() {\r\n  yield all([\r\n    fork(watchFollow),\r\n    fork(watchUnfollow),\r\n    fork(watchLogin),\r\n    fork(watchLogOut),\r\n    fork(watchSignUp),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}